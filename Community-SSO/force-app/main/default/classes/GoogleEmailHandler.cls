//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class GoogleEmailHandler implements Auth.RegistrationHandler {

    
global User createUser(Id portalId, Auth.UserData data){
    
    
    System.debug(SYSTEM.LoggingLevel.DEBUG, '\n **** GEmail Data '+data);
    System.debug(SYSTEM.LoggingLevel.DEBUG, '\n **** Gemail Att Map '+data.attributeMap);
    
    String userName = data.email.subStringBefore('@') + '@partner.com.gemail.dev';
    
    if(data.attributeMap.containsKey('sfdc_networkid')) {
        userName = data.email.subStringBefore('@') + '@panther.com.gemail.portal';
    }
    
    List<User> userList = [Select Id, Name, Email, UserName From User 
                                  Where ( UserName =: userName)
                                  AND isActive = true
                                  ];
    User user = new User();
    if(userList != null && userList.size() > 0){
        user = userList.get(0);
        return user;
    } else {
    
        if(data.attributeMap.containsKey('sfdc_networkid')) {
            //We have a community id, so create a user with community access
            //TODO: Get an actual account
            
            Account a = [SELECT Id FROM account WHERE name='Google Email'];
            
            Contact c = new Contact();
            c.accountId = a.Id;
            c.email = data.email;
            c.firstName = data.firstName;
            c.lastName  = data.lastName;
            insert(c);
    
            
            User u = new User();
            Profile p = [SELECT Id FROM profile WHERE name='Partner Community Login User'];
            // sfdcpnather@gmail.com
            String partnerUserName = data.email.subStringBefore('@') + '@panther.com.gemail.portal';
            
            u.username = partnerUserName;
            u.email = data.email;
            u.lastName = data.lastName;
            u.firstName = data.firstName;
            String alias = u.username;
            //Alias must be 8 characters or less
            if(alias !=null && alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            u.languagelocalekey = UserInfo.getLocale();
            u.localesidkey = UserInfo.getLocale();
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            u.contactId = c.Id;
            return u;
        } else {
            
            User u = new User();
            
            Profile p = [SELECT Id FROM profile WHERE name='System Administrator'];
            
            u.username = data.email.subStringBefore('@') + '@partner.com.gemail.dev';
            u.email = data.email;
            u.lastName = data.lastName;
            u.firstName = data.firstName;
            String alias = u.username;
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            u.languagelocalekey = UserInfo.getLocale();
            u.localesidkey = UserInfo.getLocale();
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            
            return u;
        }
    }
}


global void updateUser(Id userId, Id portalId, Auth.UserData data){

    String userName = data.email.subStringBefore('@') + '@partner.com.gemail.dev';
    
    if(data.attributeMap.containsKey('sfdc_networkid')) {
        userName = data.email.subStringBefore('@') + '@panther.com.gemail.portal';
    }
    System.debug('#### userId '+userId);
    List<User> userList = [Select Id, Name, Email, UserName From User Where UserName =: userName AND isActive = true];
    User u = new User();
    if(userList != null && userList.size() > 0){
        u = userList.get(0);
    }
    
}
}